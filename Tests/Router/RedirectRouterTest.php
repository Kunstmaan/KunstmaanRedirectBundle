<?php

namespace Kunstmaan\RedirectBundle\Tests\Router;

use Doctrine\Common\Persistence\ObjectRepository;
use Kunstmaan\RedirectBundle\Entity\Redirect;
use Kunstmaan\RedirectBundle\Router\RedirectRouter;
use Symfony\Component\Routing\RequestContext;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-16 at 21:28:42.
 */
class RedirectRouterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RedirectRouter
     */
    protected $object;

    /**
     * @var ObjectRepository
     */
    protected $repository;

    /**
     * @var Redirect[]
     */
    protected $redirects;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->repository = $this->getRedirectRepository();
        $this->object     = new RedirectRouter($this->repository);
    }

    private function getRedirects()
    {
        if (!isset($this->redirects)) {
            $this->redirects = array(
                (new Redirect())->setOrigin('test')->setTarget('/target1')->setPermanent(false)->setId(1),
                (new Redirect())->setOrigin('test2')->setTarget('/target2')->setPermanent(true)->setId(2)
            );
        }

        return $this->redirects;
    }

    protected function getRedirectRepository()
    {
        $repository = $this->getMock('Doctrine\Common\Persistence\ObjectRepository');
        $repository->expects($this->any())->method('findAll')->will($this->returnValue($this->getRedirects()));

        return $repository;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\RedirectBundle\Router\RedirectRouter::getContext
     * @covers Kunstmaan\RedirectBundle\Router\RedirectRouter::setContext
     */
    public function testGetSetContext()
    {
        $context = new RequestContext();
        $this->object->setContext($context);
        $this->assertEquals($context, $this->object->getContext());
    }

    /**
     * @covers Kunstmaan\RedirectBundle\Router\RedirectRouter::getRouteCollection
     */
    public function testGetRouteCollection()
    {
        $collection = $this->object->getRouteCollection();
        $this->assertEquals(2, $collection->count());
    }

    /**
     * @covers Kunstmaan\RedirectBundle\Router\RedirectRouter::generate
     * @expectedException \Symfony\Component\Routing\Exception\RouteNotFoundException
     */
    public function testGenerate()
    {
        $this->object->generate('test');
    }

    /**
     * @covers Kunstmaan\RedirectBundle\Router\RedirectRouter::match
     */
    public function testMatch()
    {
        $redirect = $this->object->match('/test');
        $this->assertEquals(
            array(
                '_controller' => 'FrameworkBundle:Redirect:urlRedirect',
                'path'        => '/target1',
                'permanent'   => false,
                '_route'      => '_redirect_route_1'
            ),
            $redirect
        );
    }
}
